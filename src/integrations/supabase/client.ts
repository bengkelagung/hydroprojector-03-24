
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://fpdckdnrntglfxqaaifp.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZwZGNrZG5ybnRnbGZ4cWFhaWZwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE5OTk3MjAsImV4cCI6MjA1NzU3NTcyMH0.2fgjrmprY6ee5mFAWQwxaB9Dm4aCmxmsVeHjoSLv4mI";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Check if the label column exists in pin_configs
export const checkLabelColumnExists = async (): Promise<boolean> => {
  try {
    // First check if pin_configs table exists
    const { data: tables, error: tableError } = await supabase
      .rpc('get_tables');
    
    if (tableError) {
      console.error('Error checking tables:', tableError);
      return false;
    }
    
    // If pin_configs table doesn't exist yet, return false
    if (!tables || !Array.isArray(tables) || !tables.includes('pin_configs')) {
      return false;
    }
    
    // Now check if the label column exists
    const { data: columns, error: columnError } = await supabase
      .rpc('get_columns', { table_name: 'pin_configs' });
    
    if (columnError) {
      console.error('Error checking columns:', columnError);
      return false;
    }
    
    return columns && Array.isArray(columns) && columns.includes('label');
  } catch (e) {
    console.error('Error checking label column:', e);
    return false;
  }
};

// Function to get all labels from the label table
export const fetchLabelsFromDatabase = async (): Promise<string[]> => {
  try {
    // Check if label table exists first
    const { data: tables, error: tableError } = await supabase
      .rpc('get_tables');
    
    if (tableError || !tables || !Array.isArray(tables) || !tables.includes('label')) {
      return getDefaultLabels();
    }
    
    // Try to fetch directly from the label table
    const { data, error } = await supabase
      .from('label')
      .select('name');
      
    if (error) {
      console.error('Error fetching labels from database:', error);
      return getDefaultLabels();
    }
    
    if (data && data.length > 0) {
      return data.map((item: any) => item.name);
    }
    
    return getDefaultLabels();
  } catch (error) {
    console.error('Error fetching labels from database:', error);
    return getDefaultLabels();
  }
};

// Function to get default labels
export const getDefaultLabels = (): string[] => {
  return ['pH', 'Suhu', 'Kelembaban', 'Pompa', 'Lampu', 'Level Air'];
};

// Utility function to check if a table exists
export const checkIfTableExists = async (tableName: string): Promise<boolean> => {
  try {
    const { data, error } = await supabase
      .rpc('get_tables');
    
    if (error) {
      console.error(`Error checking if table ${tableName} exists:`, error);
      return false;
    }
    
    return data && Array.isArray(data) && data.includes(tableName);
  } catch (e) {
    console.error(`Error checking if table ${tableName} exists:`, e);
    return false;
  }
};
