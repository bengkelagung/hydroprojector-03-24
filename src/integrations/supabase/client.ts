
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://vtqxdgejqgyhhvnaxnfq.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZ0cXhkZ2VqcWd5aGh2bmF4bmZxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIyNjMzMzMsImV4cCI6MjA1NzgzOTMzM30.yIqydW7F2KLiA6-OwwMP-AAD-wbAsFyqWPNhvy23G1w";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

/**
 * Check if a specific table exists in the Supabase database
 * @param tableName The name of the table to check
 * @returns A boolean indicating if the table exists
 */
export const checkIfTableExists = async (tableName: string): Promise<boolean> => {
  try {
    const { data, error } = await supabase.rpc('get_tables');
    if (error) {
      console.error('Error checking tables:', error);
      return false;
    }
    
    return data.some((table: { table_name: string }) => table.table_name === tableName);
  } catch (error) {
    console.error('Error in checkIfTableExists:', error);
    return false;
  }
};

/**
 * Check if all required tables exist
 * @returns A boolean indicating if all required tables exist
 */
export const checkTablesExist = async (): Promise<boolean> => {
  try {
    const requiredTables = [
      'profiles', 
      'projects', 
      'devices', 
      'pins', 
      'data_types', 
      'signal_types', 
      'modes', 
      'label', 
      'pin_configs', 
      'pin_data'
    ];
    
    const { data, error } = await supabase.rpc('get_tables');
    
    if (error) {
      console.error('Error checking tables:', error);
      return false;
    }
    
    const existingTables = data.map((table: { table_name: string }) => table.table_name);
    
    return requiredTables.every(table => existingTables.includes(table));
  } catch (error) {
    console.error('Error in checkTablesExist:', error);
    return false;
  }
};

/**
 * Check if the label_id column exists in the pin_configs table
 * @returns A boolean indicating if the label_id column exists
 */
export const checkLabelColumnExists = async (): Promise<boolean> => {
  try {
    // First check if the pin_configs table exists
    const tableExists = await checkIfTableExists('pin_configs');
    if (!tableExists) {
      return false;
    }
    
    const { data, error } = await supabase.rpc('get_columns', { table_name: 'pin_configs' });
    
    if (error) {
      console.error('Error checking for label_id column:', error);
      return false;
    }
    
    return data.some((column: { column_name: string }) => column.column_name === 'label_id');
  } catch (error) {
    console.error('Error in checkLabelColumnExists:', error);
    return false;
  }
};

/**
 * Get default labels when database is not available
 * @returns Array of default labels
 */
export const getDefaultLabels = (): string[] => {
  return ['pH', 'Temperature', 'Humidity', 'Water Level', 'Nutrient', 'Light'];
};

/**
 * Fetch labels from the database
 * @returns Array of label names
 */
export const fetchLabelsFromDatabase = async (): Promise<string[]> => {
  try {
    // First check if the label table exists
    const tableExists = await checkIfTableExists('label');
    if (!tableExists) {
      return getDefaultLabels();
    }
    
    // Query directly from the label table instead of using the function
    const { data, error } = await supabase
      .from('label')
      .select('name')
      .order('name');
    
    if (error) {
      console.error('Error fetching labels from database:', error);
      return getDefaultLabels();
    }
    
    return data.map(label => label.name);
  } catch (error) {
    console.error('Error in fetchLabelsFromDatabase:', error);
    return getDefaultLabels();
  }
};

/**
 * Fetch pin configurations with related data
 * @param userId The user ID to filter by
 * @returns Array of pin configurations with related data
 */
export const fetchPinConfigsWithRelations = async (userId: string) => {
  try {
    const { data, error } = await supabase.rpc('get_pin_configs_with_relations', {
      user_uuid: userId
    });
    
    if (error) {
      console.error('Error fetching pin configs with relations:', error);
      return [];
    }
    
    return data;
  } catch (error) {
    console.error('Error in fetchPinConfigsWithRelations:', error);
    return [];
  }
};

/**
 * Fetch pins with their information
 * @returns Array of pins with their information
 */
export const fetchPinsWithInfo = async () => {
  try {
    const { data, error } = await supabase.rpc('get_pins_with_info');
    
    if (error) {
      console.error('Error fetching pins with info:', error);
      return [];
    }
    
    return data;
  } catch (error) {
    console.error('Error in fetchPinsWithInfo:', error);
    return [];
  }
};

/**
 * Fetch data types from the database
 * @returns Array of data type names
 */
export const fetchDataTypes = async (): Promise<string[]> => {
  try {
    const { data, error } = await supabase.rpc('get_data_types');
    
    if (error) {
      console.error('Error fetching data types:', error);
      return [];
    }
    
    return data.map(type => type.name);
  } catch (error) {
    console.error('Error in fetchDataTypes:', error);
    return [];
  }
};

/**
 * Fetch signal types from the database
 * @returns Array of signal type names
 */
export const fetchSignalTypes = async (): Promise<string[]> => {
  try {
    const { data, error } = await supabase.rpc('get_signal_types');
    
    if (error) {
      console.error('Error fetching signal types:', error);
      return [];
    }
    
    return data.map(type => type.name);
  } catch (error) {
    console.error('Error in fetchSignalTypes:', error);
    return [];
  }
};

/**
 * Fetch modes from the database
 * @returns Array of mode types
 */
export const fetchModes = async (): Promise<string[]> => {
  try {
    const { data, error } = await supabase.rpc('get_modes');
    
    if (error) {
      console.error('Error fetching modes:', error);
      return [];
    }
    
    return data.map(mode => mode.type);
  } catch (error) {
    console.error('Error in fetchModes:', error);
    return [];
  }
};

/**
 * Find data type ID by name
 * @param name The name of the data type
 * @returns The ID of the data type or null if not found
 */
export const findDataTypeIdByName = async (name: string): Promise<number | null> => {
  try {
    const { data, error } = await supabase
      .from('data_types')
      .select('id')
      .eq('name', name)
      .single();
    
    if (error) {
      console.error('Error finding data type ID:', error);
      return null;
    }
    
    return data.id;
  } catch (error) {
    console.error('Error in findDataTypeIdByName:', error);
    return null;
  }
};

/**
 * Find signal type ID by name
 * @param name The name of the signal type
 * @returns The ID of the signal type or null if not found
 */
export const findSignalTypeIdByName = async (name: string): Promise<number | null> => {
  try {
    const { data, error } = await supabase
      .from('signal_types')
      .select('id')
      .eq('name', name)
      .single();
    
    if (error) {
      console.error('Error finding signal type ID:', error);
      return null;
    }
    
    return data.id;
  } catch (error) {
    console.error('Error in findSignalTypeIdByName:', error);
    return null;
  }
};

/**
 * Find mode ID by type
 * @param type The type of the mode
 * @returns The ID of the mode or null if not found
 */
export const findModeIdByType = async (type: string): Promise<number | null> => {
  try {
    const { data, error } = await supabase
      .from('modes')
      .select('id')
      .eq('type', type)
      .single();
    
    if (error) {
      console.error('Error finding mode ID:', error);
      return null;
    }
    
    return data.id;
  } catch (error) {
    console.error('Error in findModeIdByType:', error);
    return null;
  }
};

/**
 * Find label ID by name
 * @param name The name of the label
 * @returns The ID of the label or null if not found
 */
export const findLabelIdByName = async (name: string): Promise<number | null> => {
  try {
    const { data, error } = await supabase
      .from('label')
      .select('id')
      .eq('name', name)
      .single();
    
    if (error) {
      console.error('Error finding label ID:', error);
      return null;
    }
    
    return data.id;
  } catch (error) {
    console.error('Error in findLabelIdByName:', error);
    return null;
  }
};

/**
 * Find pin ID by number
 * @param pinNumber The pin number
 * @returns The ID of the pin or null if not found
 */
export const findPinIdByNumber = async (pinNumber: number): Promise<string | null> => {
  try {
    const { data, error } = await supabase
      .from('pins')
      .select('id')
      .eq('pin_number', pinNumber)
      .single();
    
    if (error) {
      console.error('Error finding pin ID:', error);
      return null;
    }
    
    return data.id;
  } catch (error) {
    console.error('Error in findPinIdByNumber:', error);
    return null;
  }
};
